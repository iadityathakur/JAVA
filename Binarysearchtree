package Aditya;
class BinarysearchTree{

static class Node{
int data;
Node left;
Node right;

Node(int data){
this.data=data;
  }
}

public static Node insert(Node root, int val{
if(root==null){
root=new Node(val);
return root;
}
else if(val<root.data){
  root.left=insert(root.left, val);
}
else{
    root.right=insert(root.right, val);
    }
    return root;
}

public static Node inorder(Node root){
if(root==null){
  return;
}
else{
  inorder(root.left);
  System.out.println(root.data+" ");
  inorder(root.right);
  }
}

public static boolean search(Node root, int key){
  if(root==null){
    return false;
  }
 else if(root.data==key){
    return true;
 }
 else if(key<root.data){
   return search(root.left,key);
 }
  else{
    return search(root.right, key);
   }
 }
 
 public static Node delete(Node root, int val){
  if(val<root.data){    
      root.left=delete(root.left,val);
     }
  else if(val>root.data){
      root.right=delete(root.right,val);
     }
   else{
          if(root.left==null && root.right==null){
            return null;
           }
           else if(root.left==null{
            return root.right;
           }
           else if(root.right==null){
            return root.left;
           }
           else{
                  Node IS=inordersuccessor(root.right);
                  root.data=IS.data;
                  root.right=delete(root.right, IS.data);
               }
          }
          return root;
        }
        
    public static Node inordersuccessor(Node root){
      while(root.left!=null){
              root=root.right;
           }
        return root;
      }
    
    public static void main(String[] args){
      int[]val={1,5,3,4,6,8,7};
      Node root=null;
      for(int i=0;i<val.length;i++){
        root=insert(root.val[i]);
       }
       inorder(root);
       System.out.println(" ");
       
       if(search(root,10){
            System.out.println("Element found");
        }
        else{
            System.out.println("Element not found"):
            }
        
        delete(root,6);
        inorder(root);
        System.out.println(" "):
        }
     }
  
